// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64"
open FsLexYaccLite.Parsing

(* (c) Microsoft Corporation 2005-2008.  *)
open FsLexYaccLite.Lex
open FsLexYaccLite.Lex.Syntax

// This type is the type of tokens accepted by the parser
type token = 
  | IDENT of (string)
  | STRING of (string)
  | CODE of (FsLexYaccLite.Lex.Syntax.Code)
  | CHAR of (char)
  | RPAREN
  | LPAREN
  | AND
  | LET
  | PARSE
  | RULE
  | DASH
  | HAT
  | RBRACK
  | LBRACK
  | UNDERSCORE
  | EQUALS
  | QMARK
  | STAR
  | PLUS
  | DOT
  | BAR
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_STRING
    | TOKEN_CODE
    | TOKEN_CHAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AND
    | TOKEN_LET
    | TOKEN_PARSE
    | TOKEN_RULE
    | TOKEN_DASH
    | TOKEN_HAT
    | TOKEN_RBRACK
    | TOKEN_LBRACK
    | TOKEN_UNDERSCORE
    | TOKEN_EQUALS
    | TOKEN_QMARK
    | TOKEN_STAR
    | TOKEN_PLUS
    | TOKEN_DOT
    | TOKEN_BAR
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startspec
    | NONTERM_spec
    | NONTERM_codeopt
    | NONTERM_Macros
    | NONTERM_macro
    | NONTERM_Rules
    | NONTERM_rule
    | NONTERM_args
    | NONTERM_optbar
    | NONTERM_clauses
    | NONTERM_clause
    | NONTERM_regexp
    | NONTERM_CharSet

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT _ -> 0 
  | STRING _ -> 1 
  | CODE _ -> 2 
  | CHAR _ -> 3 
  | RPAREN  -> 4 
  | LPAREN  -> 5 
  | AND  -> 6 
  | LET  -> 7 
  | PARSE  -> 8 
  | RULE  -> 9 
  | DASH  -> 10 
  | HAT  -> 11 
  | RBRACK  -> 12 
  | LBRACK  -> 13 
  | UNDERSCORE  -> 14 
  | EQUALS  -> 15 
  | QMARK  -> 16 
  | STAR  -> 17 
  | PLUS  -> 18 
  | DOT  -> 19 
  | BAR  -> 20 
  | EOF  -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_STRING 
  | 2 -> TOKEN_CODE 
  | 3 -> TOKEN_CHAR 
  | 4 -> TOKEN_RPAREN 
  | 5 -> TOKEN_LPAREN 
  | 6 -> TOKEN_AND 
  | 7 -> TOKEN_LET 
  | 8 -> TOKEN_PARSE 
  | 9 -> TOKEN_RULE 
  | 10 -> TOKEN_DASH 
  | 11 -> TOKEN_HAT 
  | 12 -> TOKEN_RBRACK 
  | 13 -> TOKEN_LBRACK 
  | 14 -> TOKEN_UNDERSCORE 
  | 15 -> TOKEN_EQUALS 
  | 16 -> TOKEN_QMARK 
  | 17 -> TOKEN_STAR 
  | 18 -> TOKEN_PLUS 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_BAR 
  | 21 -> TOKEN_EOF 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startspec 
    | 1 -> NONTERM_spec 
    | 2 -> NONTERM_codeopt 
    | 3 -> NONTERM_codeopt 
    | 4 -> NONTERM_Macros 
    | 5 -> NONTERM_Macros 
    | 6 -> NONTERM_macro 
    | 7 -> NONTERM_Rules 
    | 8 -> NONTERM_Rules 
    | 9 -> NONTERM_rule 
    | 10 -> NONTERM_args 
    | 11 -> NONTERM_args 
    | 12 -> NONTERM_optbar 
    | 13 -> NONTERM_optbar 
    | 14 -> NONTERM_clauses 
    | 15 -> NONTERM_clauses 
    | 16 -> NONTERM_clause 
    | 17 -> NONTERM_regexp 
    | 18 -> NONTERM_regexp 
    | 19 -> NONTERM_regexp 
    | 20 -> NONTERM_regexp 
    | 21 -> NONTERM_regexp 
    | 22 -> NONTERM_regexp 
    | 23 -> NONTERM_regexp 
    | 24 -> NONTERM_regexp 
    | 25 -> NONTERM_regexp 
    | 26 -> NONTERM_regexp 
    | 27 -> NONTERM_regexp 
    | 28 -> NONTERM_regexp 
    | 29 -> NONTERM_regexp 
    | 30 -> NONTERM_CharSet 
    | 31 -> NONTERM_CharSet 
    | 32 -> NONTERM_CharSet 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT _ -> "IDENT" 
  | STRING _ -> "STRING" 
  | CODE _ -> "CODE" 
  | CHAR _ -> "CHAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AND  -> "AND" 
  | LET  -> "LET" 
  | PARSE  -> "PARSE" 
  | RULE  -> "RULE" 
  | DASH  -> "DASH" 
  | HAT  -> "HAT" 
  | RBRACK  -> "RBRACK" 
  | LBRACK  -> "LBRACK" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | EQUALS  -> "EQUALS" 
  | QMARK  -> "QMARK" 
  | STAR  -> "STAR" 
  | PLUS  -> "PLUS" 
  | DOT  -> "DOT" 
  | BAR  -> "BAR" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | PARSE  -> (null : System.Object) 
  | RULE  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | HAT  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 3us; 12us; 24us; 2us; 65535us; 3us; 5us; 6us; 9us; 2us; 65535us; 3us; 6us; 6us; 6us; 2us; 65535us; 8us; 12us; 25us; 36us; 2us; 65535us; 8us; 13us; 25us; 13us; 2us; 65535us; 11us; 23us; 22us; 34us; 1us; 65535us; 42us; 46us; 2us; 65535us; 46us; 48us; 51us; 53us; 2us; 65535us; 46us; 49us; 51us; 49us; 10us; 65535us; 10us; 21us; 17us; 26us; 21us; 33us; 26us; 33us; 32us; 41us; 33us; 33us; 41us; 33us; 46us; 50us; 50us; 33us; 51us; 50us; 2us; 65535us; 18us; 28us; 27us; 38us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 12us; 15us; 18us; 21us; 23us; 26us; 29us; 40us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 54us; 0us; 54us; 2us; 54us; 0us; 54us; 1us; 54us; 6us; 54us; 1us; 54us; 5us; 54us; 6us; 54us; 1us; 54us; 5us; 54us; 6us; 54us; 9us; 54us; 1us; 54us; 7us; 8us; 54us; 21us; 54us; 20us; 54us; 17us; 54us; 27us; 54us; 28us; 29us; 54us; 19us; 54us; 18us; 54us; 6us; 22us; 23us; 24us; 25us; 26us; 54us; 11us; 54us; 9us; 54us; 1us; 54us; 7us; 54us; 22us; 23us; 24us; 25us; 26us; 27us; 54us; 29us; 54us; 28us; 30us; 31us; 54us; 25us; 54us; 24us; 54us; 23us; 54us; 26us; 54us; 22us; 22us; 23us; 24us; 25us; 26us; 54us; 11us; 54us; 9us; 54us; 7us; 54us; 27us; 54us; 29us; 30us; 31us; 54us; 30us; 31us; 54us; 28us; 54us; 22us; 23us; 24us; 25us; 26us; 26us; 54us; 9us; 54us; 29us; 54us; 31us; 54us; 13us; 54us; 9us; 54us; 31us; 54us; 9us; 54us; 14us; 15us; 54us; 16us; 22us; 23us; 24us; 25us; 26us; 54us; 14us; 54us; 16us; 54us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 55us; 110us; 165us; 220us; 275us; 330us; 385us; 440us; 495us; 550us; 605us; 660us; 715us; 770us; 825us; 880us; 935us; 990us; 1045us; 1100us; 1155us; 1210us; 1265us; 1320us; 1375us; 1430us; 1485us; 1540us; 1595us; 1650us; 1705us; 1760us; 1815us; 1870us; 1925us; 1980us; 2035us; 2090us; 2145us; 2200us; 2255us; 2310us; 2365us; 2420us; 2475us; 2530us; 2585us; 2640us; 2695us; 2750us; 2805us; 2860us; 2915us; |]
let _fsyacc_action_rows = 54
let _fsyacc_actionTableElements = [|3us; 32768us; 2us; 1us; 7us; 16387us; 9us; 16387us; 0us; 16386us; 0us; 16384us; 2us; 32768us; 7us; 4us; 9us; 16388us; 1us; 32768us; 0us; 7us; 1us; 32768us; 9us; 8us; 2us; 32768us; 7us; 4us; 9us; 16388us; 1us; 32768us; 15us; 10us; 1us; 32768us; 0us; 11us; 0us; 16389us; 7us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 21us; 20us; 2us; 32768us; 0us; 22us; 15us; 16394us; 2us; 32768us; 2us; 1us; 24us; 16387us; 3us; 32768us; 2us; 16392us; 6us; 25us; 24us; 16392us; 0us; 16405us; 0us; 16404us; 0us; 16401us; 7us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 21us; 20us; 3us; 32768us; 3us; 16416us; 11us; 27us; 12us; 16416us; 0us; 16403us; 0us; 16402us; 13us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 7us; 16390us; 9us; 16390us; 13us; 18us; 14us; 19us; 16us; 29us; 17us; 30us; 18us; 31us; 20us; 32us; 21us; 20us; 2us; 32768us; 0us; 22us; 15us; 16394us; 1us; 32768us; 15us; 35us; 0us; 16385us; 1us; 32768us; 0us; 11us; 12us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 4us; 37us; 5us; 17us; 13us; 18us; 14us; 19us; 16us; 29us; 17us; 30us; 18us; 31us; 20us; 32us; 21us; 20us; 2us; 32768us; 3us; 16416us; 12us; 16416us; 2us; 32768us; 3us; 39us; 12us; 40us; 0us; 16409us; 0us; 16408us; 0us; 16407us; 7us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 21us; 20us; 15us; 32768us; 0us; 14us; 1us; 15us; 2us; 16406us; 3us; 16us; 4us; 16406us; 5us; 17us; 7us; 16406us; 9us; 16406us; 13us; 18us; 14us; 19us; 16us; 29us; 17us; 30us; 18us; 31us; 20us; 16406us; 21us; 20us; 0us; 16395us; 1us; 32768us; 8us; 42us; 0us; 16391us; 0us; 16411us; 2us; 32768us; 3us; 39us; 12us; 43us; 3us; 32768us; 3us; 16414us; 10us; 44us; 12us; 16414us; 0us; 16412us; 15us; 32768us; 0us; 14us; 1us; 15us; 2us; 16410us; 3us; 16us; 4us; 16410us; 5us; 17us; 7us; 16410us; 9us; 16410us; 13us; 18us; 14us; 19us; 16us; 29us; 17us; 30us; 18us; 31us; 20us; 16410us; 21us; 20us; 8us; 32768us; 0us; 16396us; 1us; 16396us; 3us; 16396us; 5us; 16396us; 13us; 16396us; 14us; 16396us; 20us; 45us; 21us; 16396us; 0us; 16413us; 1us; 32768us; 3us; 47us; 0us; 16397us; 7us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 21us; 20us; 0us; 16415us; 0us; 16393us; 4us; 32768us; 2us; 16399us; 6us; 16399us; 20us; 51us; 24us; 16399us; 12us; 32768us; 0us; 14us; 1us; 15us; 2us; 52us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 16us; 29us; 17us; 30us; 18us; 31us; 20us; 32us; 21us; 20us; 7us; 32768us; 0us; 14us; 1us; 15us; 3us; 16us; 5us; 17us; 13us; 18us; 14us; 19us; 21us; 20us; 0us; 16400us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 9us; 11us; 13us; 16us; 18us; 20us; 21us; 29us; 32us; 35us; 39us; 40us; 41us; 42us; 50us; 54us; 55us; 56us; 70us; 73us; 75us; 76us; 78us; 91us; 94us; 97us; 98us; 99us; 100us; 108us; 124us; 125us; 127us; 128us; 129us; 132us; 136us; 137us; 153us; 162us; 163us; 165us; 166us; 174us; 175us; 176us; 181us; 194us; 202us; 203us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 5us; 1us; 0us; 0us; 2us; 4us; 3us; 1us; 6us; 0us; 2us; 0us; 1us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 2us; 4us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; |]
let _fsyacc_reductions ()  =    [| 
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : FsLexYaccLite.Lex.Syntax.Spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsLexYaccLite.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startspec));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'codeopt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Macros)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rules)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'codeopt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               { TopCode=_1;Macros=_2;Rules=_4;BottomCode=_5 } 
                   )
                 : FsLexYaccLite.Lex.Syntax.Spec));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : FsLexYaccLite.Lex.Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                     _1 
                   )
                 : 'codeopt));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                              "", (parseState.ResultRange |> fst) 
                   )
                 : 'codeopt));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                [] 
                   )
                 : 'Macros));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'macro)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Macros)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      _1 :: _2 
                   )
                 : 'Macros));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      (_2, _4) 
                   )
                 : 'macro));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             _1 :: _3 
                   )
                 : 'Rules));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                 [_1] 
                   )
                 : 'Rules));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'optbar)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                    (_1,_2,_6) 
                   )
                 : 'rule));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                             [] 
                   )
                 : 'args));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                 _1 :: _2 
                   )
                 : 'args));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                               
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                  _1 :: _3 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                        [_1] 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : FsLexYaccLite.Lex.Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                           _1, _2 
                   )
                 : 'clause));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Inp (CharSet (Set.singleton (_1, _1))) 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Inp Eof 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Inp Any 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Seq (List.init _1.Length (fun i -> Inp (CharSet (Set.singleton(_1.[i], _1.[i]))))) 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Macro _1 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Seq [_1; _2] 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Seq [_1; Star _1] 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Star _1 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Alt [Seq []; _1] 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Alt [_1; _3] 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _2 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CharSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Inp (CharSet _2) 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CharSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Inp (NotCharSet _3) 
                   )
                 : 'regexp));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CharSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                    Set.add (_2, _2) _1 
                   )
                 : 'CharSet));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CharSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                    Set.add (_2, _4) _1 
                   )
                 : 'CharSet));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                    Set.empty 
                   )
                 : 'CharSet));
|]
let tables () : FsLexYaccLite.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let spec lexer lexbuf : FsLexYaccLite.Lex.Syntax.Spec =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
