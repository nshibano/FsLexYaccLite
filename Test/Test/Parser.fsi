// Signature file for parser generated by fsyacc
module Test.Parser
type token = 
  | EOF
  | ELSE
  | THEN
  | IF
  | DOTDOT
  | STAR
  | MINUS
  | PLUS
  | NUMBER of (int)
  | IDENT of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_DOTDOT
    | TOKEN_STAR
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_NUMBER
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startExpr
    | NONTERM_Expr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Expr : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Test.Ast.Expr) 
