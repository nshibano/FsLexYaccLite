{
open Syntax
open Parser
open System.Text
open FsLexYaccLiteRuntime

let append (lexbuf : LexBuffer) (sb : StringBuilder) = sb.Append(lexbuf.Lexeme) |> ignore
} 

let letter = ['A'-'Z'] | ['a'-'z']
let digit = ['0'-'9']
let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let ident = letter (letter|digit|['\'' '_'])*

rule token = parse
    | "%{"                         { header (StringBuilder()) lexbuf }
    | "%%"                         { PERCENT_PERCENT }
	| "<"                          { TYPE_LITERAL (fs_type 1 (StringBuilder()) lexbuf) }
    | "%token"                     { TOKEN }
    | "%start"                     { START }
    | "%prec"                      { PREC }
    | "%type"                      { KW_TYPE }
    | "%left"                      { LEFT }
    | "%right"                     { RIGHT }
    | "%nonassoc"                  { NONASSOC }
    | ';'                          { SEMI }
    | '{'                          { let buf = StringBuilder()
                                     buf.Append(' ', lexbuf.StartPos.Column + 1) |> ignore
                                     code 1 buf lexbuf }
    | whitespace+                  { token lexbuf }
    | newline                      { lexbuf.NewLine(); token lexbuf }
    | ident                        { IDENT lexbuf.Lexeme }
    | '|'                          { BAR }
    | "/*"                         { ignore(comment lexbuf); token lexbuf }
    | "//" [^'\n''\r']*            { token lexbuf }
    | ':'                          { COLON }
    | _                            { failwithf "Unexpected char %c" lexbuf.Lexeme.[0] }
    | eof                          { EOF }

and fs_type level buf = parse
    | '>' { if level = 1 then
                buf.ToString() 
            else
                append lexbuf buf
                fs_type (level - 1) buf lexbuf }
    | '<' { append lexbuf buf
            fs_type (level + 1) buf lexbuf }
    | _   { append lexbuf buf
            fs_type level buf lexbuf }
    | eof { failwith "Unterminated type expression literal" }

and header buf = parse
    | "%}"    { HEADER (buf.ToString()) }
    | newline { lexbuf.NewLine()
                append lexbuf buf
                header buf lexbuf }
    | _       { append lexbuf buf
                header buf lexbuf }
    | eof     { failwith "Unterminated header" }

and code level buf = parse
    | "}"     { if level = 1 then
                    CODE (buf.ToString())
                else
                    append lexbuf buf
                    code (level - 1) buf lexbuf }
    | "{"     { append lexbuf buf
                code (level + 1) buf lexbuf }
    | newline { lexbuf.NewLine()
                append lexbuf buf
                code level buf lexbuf }
    | _       { append lexbuf buf
                code level buf lexbuf }
    | eof     { failwith "Unterminated code" }

and comment = parse
    | "/*"                   { comment lexbuf; comment lexbuf }
    | "*/"                   { () }
    | newline                { lexbuf.NewLine(); comment lexbuf }
    | [^ '/' '*' '\r' '\n']+
    | _                      { comment lexbuf }
    | eof                    { failwith "Unterminated comment" }