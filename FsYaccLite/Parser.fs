// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64"

open Syntax

type token = 
  | IDENT of string
  | HEADER of Syntax.Code
  | CODE of Syntax.Code
  | BAR
  | PERCENT_PERCENT
  | START
  | LEFT
  | RIGHT
  | NONASSOC
  | COLON
  | PREC
  | SEMI
  | EOF
  | TYPE of string
  | TOKEN of string option

let tagOfToken (t : token) = 
  match t with
  | IDENT _ -> 0 
  | HEADER _ -> 1 
  | CODE _ -> 2 
  | BAR  -> 3 
  | PERCENT_PERCENT  -> 4 
  | START  -> 5 
  | LEFT  -> 6 
  | RIGHT  -> 7 
  | NONASSOC  -> 8 
  | COLON  -> 9 
  | PREC  -> 10 
  | SEMI  -> 11 
  | EOF  -> 12 
  | TYPE _ -> 13 
  | TOKEN _ -> 14 

let endOfInputTag = 17 

let dataOfToken (t : token) : obj = 
  match t with 
  | IDENT x -> box x 
  | HEADER x -> box x 
  | CODE x -> box x 
  | BAR  -> null 
  | PERCENT_PERCENT  -> null 
  | START  -> null 
  | LEFT  -> null 
  | RIGHT  -> null 
  | NONASSOC  -> null 
  | COLON  -> null 
  | PREC  -> null 
  | SEMI  -> null 
  | EOF  -> null 
  | TYPE x -> box x 
  | TOKEN x -> box x 

let reductionSymbolCounts = [|1us; 5us; 1us; 0us; 2us; 0us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 0us; 2us; 1us; 5us; 1us; 0us; 1us; 0us; 3us; 1us; 3us; 2us; 0us; 2us; 0us|]
let productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us|]
let maxProductionBodyLength = 5
let actionTable_buckets = [| -1s; 0s; -1s; 2s; 3s; 4s; 6s; 9s; 11s; 13s; -1s; -1s; -1s; 14s; 15s; 17s; -1s; -1s; -1s; 18s; -1s; 19s; -1s; 20s; 21s; 22s; 24s; 26s; -1s; 27s; -1s; -1s; 28s; 29s; -1s; -1s; -1s; 31s; 32s; 33s; -1s; 34s; 35s; 36s; 37s; 38s; -1s; -1s; -1s; -1s; 39s; 41s; -1s; 42s; -1s; 43s; -1s; 44s; 45s; 47s; 50s; 53s; 56s; 58s; -1s; -1s; -1s; 59s; 60s; 63s; -1s; -1s; -1s; 65s; 66s; 67s; 68s; 70s; 73s; 77s; 79s; 81s; -1s; -1s; -1s; 82s; 84s; 87s; -1s; -1s; 88s; 89s; 90s; -1s; 91s; 92s; 93s; 94s; 96s; 97s; -1s; -1s; -1s; -1s; 98s; 99s; 101s |]
let actionTable_entries = [| -2s; 1s; 108s; -14s; 324s; 25s; 4s; -4s; -6s; -4s; 112s; -14s; -7s; -4s; -114s; -14s; 648s; 39s; -8s; -4s; 114s; -14s; -9s; -4s; 115s; -14s; 116s; -14s; 13s; -4s; -15s; -4s; 121s; -14s; 122s; -14s; 126s; -14s; 342s; 25s; 130s; -14s; 131s; -14s; -133s; -14s; 560s; -28s; -134s; -14s; 668s; 40s; 134s; -14s; 243s; 22s; 139s; -14s; -141s; -14s; 568s; 36s; 144s; -14s; 252s; 13s; 360s; 25s; 148s; -14s; 149s; -14s; 150s; -14s; 151s; -14s; 152s; -14s; -158s; -14s; 264s; 23s; 158s; -14s; 53s; 32767s; 162s; -14s; 378s; 25s; -59s; -6s; 486s; 28s; -60s; -6s; -167s; -14s; 594s; 28s; -61s; -6s; -168s; -14s; 488s; -26s; -62s; -6s; -169s; -14s; 596s; -26s; -63s; -6s; 169s; -14s; 170s; -14s; 67s; -6s; -69s; -6s; -176s; -14s; 496s; -26s; -177s; -14s; 604s; -26s; 180s; -14s; 288s; 25s; 396s; -19s; -77s; 5s; 504s; 28s; -78s; 6s; -185s; -14s; 398s; -19s; -79s; 7s; -186s; -14s; -400s; 26s; 506s; -26s; -80s; 8s; 186s; -14s; -81s; 9s; 187s; -14s; 188s; -14s; -86s; 10s; 406s; -19s; -87s; 11s; -194s; -14s; 514s; -26s; 194s; -14s; 90s; 13s; 198s; -14s; 306s; 25s; 522s; -21s; 202s; -14s; 203s; -14s; -205s; -14s; 525s; 33s; 205s; -14s; 206s; -14s; 211s; -14s; -213s; -14s; 533s; 34s; 534s; -21s |]
let actionTable_defaultActions = [| -32768s; -3s; -1s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -5s; -32768s; -32768s; -16s; -9s; -10s; -11s; -12s; -8s; -7s; -32768s; -2s; -15s; -13s; -18s; -32768s; -32768s; -32768s; -23s; -32768s; -25s; -32768s; -20s; -17s; -32768s; -32768s; -22s; -27s; -24s |]
let gotoTable_buckets = [| -1s; 0s; 2s; -1s; -1s; -1s; -1s; 4s; 6s; -1s; 7s; 8s; -1s; 9s; 11s; -1s; 13s; 14s; -1s; 15s; 16s; 18s; 20s |]
let gotoTable_entries = [| -2s; 2s; 415s; 35s; -3s; 3s; 117s; 18s; -77s; 14s; 145s; 20s; 77s; 15s; 447s; 37s; 103s; 17s; -405s; 32s; 473s; 38s; -61s; 12s; 474s; 31s; 131s; 19s; 316s; 27s; 203s; 24s; -90s; 16s; 388s; 29s; -160s; 21s; 389s; 30s; -46s; 4s; 390s; 31s |]
let reductions =    [| 
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.ParserSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      failwith "unreachable"
                   )
                 : '_startspec));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'headerOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                       { Header = _1; Decls = List.rev _2; Rules = List.rev _4 } 
                   )
                 : Syntax.ParserSpec));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                    _1 
                   )
                 : 'headerOpt));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                    "" 
                   )
                 : 'headerOpt));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        _2 :: _1 
                   )
                 : 'decls));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        [] 
                   )
                 : 'decls));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string option)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Token (_1, List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Type (_1, List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Start (List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Prec (LeftAssoc, List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Prec (RightAssoc, List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             Prec (NonAssoc, List.rev _2) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                          _2 :: _1 
                   )
                 : 'idents));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                          [] 
                   )
                 : 'idents));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        _2 :: _1 
                   )
                 : 'rules));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        [_1] 
                   )
                 : 'rules));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'optbar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'optsemi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                (_1, List.rev _4) 
                   )
                 : 'rule));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                 
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                 
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                  
                   )
                 : 'optsemi));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                  
                   )
                 : 'optsemi));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                _3 :: _1 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                [_1] 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'syms)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optprec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                               { Symbols = _1; PrecSymbol = _2; Code = _3} 
                   )
                 : 'clause));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'syms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        _1 :: _2 
                   )
                 : 'syms));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        [] 
                   )
                 : 'syms));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        Some _2 
                   )
                 : 'optprec));
        (fun (parseState : FsLexYaccLiteRuntime.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        None 
                   )
                 : 'optprec));
|]
let terminalsCount = 18
let nonTerminalsCount = 14
let tables = FsLexYaccLiteRuntime.ParseTables(reductions, endOfInputTag, tagOfToken, dataOfToken, reductionSymbolCounts, productionToNonTerminalTable, maxProductionBodyLength, gotoTable_buckets, gotoTable_entries, nonTerminalsCount, actionTable_buckets, actionTable_entries, actionTable_defaultActions, terminalsCount)
let spec lexer lexbuf : Syntax.ParserSpec = unbox (tables.Interpret(lexer, lexbuf, 0))
