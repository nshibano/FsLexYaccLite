// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64"
open FsLexYaccLite.Parsing

open Syntax

// This type is the type of tokens accepted by the parser
type token = 
  | IDENT of (string)
  | CODE of (Syntax.Code)
  | HEADER of (Syntax.Code)
  | ERROR
  | EOF
  | SEMI
  | PREC
  | COLON
  | GREATER
  | LESS
  | NONASSOC
  | RIGHT
  | LEFT
  | START
  | PERCENT_PERCENT
  | BAR
  | TYPE of (string)
  | TOKEN of (string option)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_CODE
    | TOKEN_HEADER
    | TOKEN_ERROR
    | TOKEN_EOF
    | TOKEN_SEMI
    | TOKEN_PREC
    | TOKEN_COLON
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_NONASSOC
    | TOKEN_RIGHT
    | TOKEN_LEFT
    | TOKEN_START
    | TOKEN_PERCENT_PERCENT
    | TOKEN_BAR
    | TOKEN_TYPE
    | TOKEN_TOKEN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startspec
    | NONTERM_spec
    | NONTERM_headeropt
    | NONTERM_decls
    | NONTERM_decl
    | NONTERM_idents
    | NONTERM_rules
    | NONTERM_rule
    | NONTERM_optbar
    | NONTERM_optsemi
    | NONTERM_clauses
    | NONTERM_clause
    | NONTERM_syms
    | NONTERM_optprec

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT _ -> 0 
  | CODE _ -> 1 
  | HEADER _ -> 2 
  | ERROR  -> 3 
  | EOF  -> 4 
  | SEMI  -> 5 
  | PREC  -> 6 
  | COLON  -> 7 
  | GREATER  -> 8 
  | LESS  -> 9 
  | NONASSOC  -> 10 
  | RIGHT  -> 11 
  | LEFT  -> 12 
  | START  -> 13 
  | PERCENT_PERCENT  -> 14 
  | BAR  -> 15 
  | TYPE _ -> 16 
  | TOKEN _ -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_CODE 
  | 2 -> TOKEN_HEADER 
  | 3 -> TOKEN_ERROR 
  | 4 -> TOKEN_EOF 
  | 5 -> TOKEN_SEMI 
  | 6 -> TOKEN_PREC 
  | 7 -> TOKEN_COLON 
  | 8 -> TOKEN_GREATER 
  | 9 -> TOKEN_LESS 
  | 10 -> TOKEN_NONASSOC 
  | 11 -> TOKEN_RIGHT 
  | 12 -> TOKEN_LEFT 
  | 13 -> TOKEN_START 
  | 14 -> TOKEN_PERCENT_PERCENT 
  | 15 -> TOKEN_BAR 
  | 16 -> TOKEN_TYPE 
  | 17 -> TOKEN_TOKEN 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startspec 
    | 1 -> NONTERM_spec 
    | 2 -> NONTERM_headeropt 
    | 3 -> NONTERM_headeropt 
    | 4 -> NONTERM_decls 
    | 5 -> NONTERM_decls 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_decl 
    | 8 -> NONTERM_decl 
    | 9 -> NONTERM_decl 
    | 10 -> NONTERM_decl 
    | 11 -> NONTERM_decl 
    | 12 -> NONTERM_idents 
    | 13 -> NONTERM_idents 
    | 14 -> NONTERM_rules 
    | 15 -> NONTERM_rules 
    | 16 -> NONTERM_rule 
    | 17 -> NONTERM_optbar 
    | 18 -> NONTERM_optbar 
    | 19 -> NONTERM_optsemi 
    | 20 -> NONTERM_optsemi 
    | 21 -> NONTERM_clauses 
    | 22 -> NONTERM_clauses 
    | 23 -> NONTERM_clause 
    | 24 -> NONTERM_syms 
    | 25 -> NONTERM_syms 
    | 26 -> NONTERM_syms 
    | 27 -> NONTERM_optprec 
    | 28 -> NONTERM_optprec 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT _ -> "IDENT" 
  | CODE _ -> "CODE" 
  | HEADER _ -> "HEADER" 
  | ERROR  -> "ERROR" 
  | EOF  -> "EOF" 
  | SEMI  -> "SEMI" 
  | PREC  -> "PREC" 
  | COLON  -> "COLON" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | NONASSOC  -> "NONASSOC" 
  | RIGHT  -> "RIGHT" 
  | LEFT  -> "LEFT" 
  | START  -> "START" 
  | PERCENT_PERCENT  -> "PERCENT_PERCENT" 
  | BAR  -> "BAR" 
  | TYPE _ -> "TYPE" 
  | TOKEN _ -> "TOKEN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEADER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ERROR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | PREC  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | NONASSOC  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | START  -> (null : System.Object) 
  | PERCENT_PERCENT  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOKEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 3us; 2us; 65535us; 3us; 10us; 11us; 20us; 2us; 65535us; 3us; 11us; 11us; 11us; 7us; 65535us; 4us; 13us; 5us; 14us; 6us; 15us; 7us; 16us; 8us; 17us; 9us; 18us; 12us; 21us; 2us; 65535us; 19us; 23us; 24us; 27us; 2us; 65535us; 19us; 24us; 24us; 24us; 1us; 65535us; 25us; 29us; 1us; 65535us; 32us; 38us; 2us; 65535us; 29us; 32us; 39us; 42us; 2us; 65535us; 29us; 33us; 39us; 33us; 4us; 65535us; 29us; 34us; 30us; 35us; 31us; 36us; 39us; 34us; 1us; 65535us; 34us; 41us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 19us; 22us; 25us; 27us; 29us; 32us; 35us; 40us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 45us; 0us; 45us; 2us; 45us; 0us; 45us; 1us; 45us; 11us; 45us; 10us; 45us; 9us; 45us; 8us; 45us; 7us; 45us; 6us; 45us; 1us; 45us; 5us; 45us; 12us; 45us; 11us; 45us; 10us; 45us; 9us; 45us; 8us; 45us; 7us; 45us; 6us; 45us; 1us; 45us; 5us; 45us; 12us; 45us; 16us; 45us; 1us; 45us; 14us; 15us; 45us; 16us; 45us; 1us; 45us; 14us; 45us; 18us; 45us; 16us; 45us; 24us; 45us; 25us; 45us; 16us; 45us; 21us; 22us; 45us; 23us; 45us; 24us; 45us; 25us; 45us; 20us; 45us; 16us; 45us; 21us; 45us; 28us; 45us; 23us; 45us; 21us; 45us; 28us; 45us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 46us; 92us; 138us; 184us; 230us; 276us; 322us; 368us; 414us; 460us; 506us; 552us; 598us; 644us; 690us; 736us; 782us; 828us; 874us; 920us; 966us; 1012us; 1058us; 1104us; 1150us; 1196us; 1242us; 1288us; 1334us; 1380us; 1426us; 1472us; 1518us; 1564us; 1610us; 1656us; 1702us; 1748us; 1794us; 1840us; 1886us; 1932us; 1978us; 2024us; |]
let _fsyacc_action_rows = 45
let _fsyacc_actionTableElements = [|8us; 32768us; 2us; 1us; 10us; 16387us; 11us; 16387us; 12us; 16387us; 13us; 16387us; 14us; 16387us; 16us; 16387us; 17us; 16387us; 0us; 16386us; 0us; 16384us; 7us; 32768us; 10us; 4us; 11us; 5us; 12us; 6us; 13us; 7us; 14us; 16388us; 16us; 8us; 17us; 9us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 1us; 32768us; 14us; 19us; 7us; 32768us; 10us; 4us; 11us; 5us; 12us; 6us; 13us; 7us; 14us; 16388us; 16us; 8us; 17us; 9us; 8us; 32768us; 0us; 12us; 10us; 16397us; 11us; 16397us; 12us; 16397us; 13us; 16397us; 14us; 16397us; 16us; 16397us; 17us; 16397us; 0us; 16395us; 0us; 16394us; 0us; 16393us; 0us; 16392us; 0us; 16391us; 0us; 16390us; 1us; 32768us; 0us; 22us; 0us; 16389us; 0us; 16396us; 1us; 32768us; 7us; 25us; 1us; 32768us; 4us; 26us; 2us; 32768us; 0us; 22us; 4us; 16399us; 5us; 32768us; 0us; 16401us; 1us; 16401us; 3us; 16401us; 6us; 16401us; 15us; 28us; 0us; 16385us; 0us; 16398us; 0us; 16402us; 4us; 32768us; 0us; 30us; 1us; 16410us; 3us; 31us; 6us; 16410us; 4us; 32768us; 0us; 30us; 1us; 16410us; 3us; 31us; 6us; 16410us; 4us; 32768us; 0us; 30us; 1us; 16410us; 3us; 31us; 6us; 16410us; 3us; 32768us; 0us; 16403us; 4us; 16403us; 5us; 37us; 4us; 32768us; 0us; 16406us; 4us; 16406us; 5us; 16406us; 15us; 39us; 2us; 32768us; 1us; 16411us; 6us; 40us; 0us; 16408us; 0us; 16409us; 0us; 16404us; 0us; 16400us; 4us; 32768us; 0us; 30us; 1us; 16410us; 3us; 31us; 6us; 16410us; 1us; 32768us; 0us; 43us; 1us; 32768us; 1us; 44us; 0us; 16405us; 0us; 16412us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 11us; 19us; 28us; 37us; 46us; 55us; 64us; 73us; 75us; 83us; 92us; 93us; 94us; 95us; 96us; 97us; 98us; 100us; 101us; 102us; 104us; 106us; 109us; 115us; 116us; 117us; 118us; 123us; 128us; 133us; 137us; 142us; 145us; 146us; 147us; 148us; 149us; 154us; 156us; 158us; 159us; 160us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 5us; 1us; 0us; 0us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 0us; 2us; 1us; 5us; 0us; 1us; 0us; 1us; 3us; 1us; 3us; 2us; 2us; 0us; 0us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; |]
let _fsyacc_reductions ()  =    [| 
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.ParserSpec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsLexYaccLite.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startspec));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'headeropt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                           List.foldBack (fun f x -> f x) _2 { Header=_1;Tokens=[];Types=[];Associativities=[];StartSymbols=[];Rules=_4 } 
                   )
                 : Syntax.ParserSpec));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                              _1 
                   )
                 : 'headeropt));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                             "", (parseState.ResultRange |> fst)
                   )
                 : 'headeropt));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                           [] 
                   )
                 : 'decls));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                      _1 :: _2 
                   )
                 : 'decls));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string option)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        (fun x -> {x with Tokens = x.Tokens @ (List.map (fun x -> (x,_1)) _2)}) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         (fun x -> {x with Types = x.Types @ (List.map (fun x -> (x,_1)) _2)} ) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                          (fun x -> {x with StartSymbols = x.StartSymbols @ _2} ) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,LeftAssoc)) _2)]} ) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                          (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,RightAssoc)) _2)]} ) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             (fun x -> {x with Associativities = x.Associativities @ [(List.map (fun x -> (x,NonAssoc)) _2)]} ) 
                   )
                 : 'decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                            _1 :: _2 
                   )
                 : 'idents));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                           [] 
                   )
                 : 'idents));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 :: _2 
                   )
                 : 'rules));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                             [_1] 
                   )
                 : 'rules));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'optbar)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'optsemi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                (_1,_4) 
                   )
                 : 'rule));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                               
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         
                   )
                 : 'optbar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                
                   )
                 : 'optsemi));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                           
                   )
                 : 'optsemi));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'clauses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                  _1 :: _3 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                        [_1] 
                   )
                 : 'clauses));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'syms)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optprec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.Code)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                 Rule(_1,_2,Some _3) 
                   )
                 : 'clause));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'syms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                        _1 :: _2 
                   )
                 : 'syms));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'syms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  "error" :: _2 
                   )
                 : 'syms));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                      [] 
                   )
                 : 'syms));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                None 
                   )
                 : 'optprec));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      Some _2 
                   )
                 : 'optprec));
|]
let tables () : FsLexYaccLite.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let spec lexer lexbuf : Syntax.ParserSpec =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
