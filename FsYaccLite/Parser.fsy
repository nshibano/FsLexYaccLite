%{
open Syntax
%} 

%type <Syntax.ParserSpec> spec
%start spec

%token <string> IDENT TYPE_LITERAL
%token <Syntax.Code> HEADER CODE 
%token BAR PERCENT_PERCENT START KW_TYPE TOKEN LEFT RIGHT NONASSOC COLON PREC SEMI EOF

%left BAR

%%      

spec:
    | headerOpt decls PERCENT_PERCENT rules EOF { { Header = $1; Decls = List.rev $2; Rules = List.rev $4 } }

headerOpt:
    | HEADER { $1 } 
    |        { "" }

decls:
    | decls decl { $2 :: $1 }
    |            { [] }

decl:
    | TOKEN TYPE_LITERAL idents   { Token (Some $2, List.rev $3) }
    | TOKEN idents                { Token (None, List.rev $2) }
    | KW_TYPE TYPE_LITERAL idents { Type ($2, List.rev $3) }
    | START idents                { Start (List.rev $2) }
    | LEFT idents                 { Prec (LeftAssoc, List.rev $2) }
    | RIGHT idents                { Prec (RightAssoc, List.rev $2) }
    | NONASSOC idents             { Prec (NonAssoc, List.rev $2) }

idents:
    | idents IDENT { $2 :: $1 }
    |              { [] }

rules:
    | rules rule { $2 :: $1 }
    | rule       { [$1] }

rule:
    | IDENT COLON optbar clauses optsemi { ($1, List.rev $4) }

optbar:
    | BAR { }
    |     { }

optsemi:
    | SEMI { }
    |      { }

clauses:
    | clauses BAR clause { $3 :: $1 }
    | clause             { [$1] }

clause:
    | syms optprec CODE { { Symbols = $1; PrecSymbol = $2; Code = $3} }

syms:
    | IDENT syms { $1 :: $2 }
    |            { [] }

optprec:
    | PREC IDENT { Some $2 }
    |            { None }